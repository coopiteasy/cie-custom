<?xml version="1.0" encoding="utf-8" ?>
<!--
     Copyright 2017-2022 Coop IT Easy
     License AGPL-3.0 or later (http://www.gnu.org/licenses/agpl).
-->
<odoo>
    <!-- add a new user group, inheriting from the project manager group -->
    <record id="group_provelo_customizer" model="res.groups">
        <field name="name">Provelo Customizer</field>
        <field name="category_id" ref="base.module_category_usability" />
        <field name="implied_ids" eval="[(4, ref('project.group_project_manager'))]" />
    </record>

    <!-- account analytic lines -->

    <!-- an employee should have full access to their own account analytic lines -->
    <record id="hr_employee_own_account_analytic_line" model="ir.rule">
        <field name="name">hr_employee_own_account_analytic_line</field>
        <field name="model_id" ref="account.model_account_analytic_line" />
        <field name="groups" eval="[(4, ref('base.group_user'))]" />
        <field name="perm_read" eval="True" />
        <field name="perm_write" eval="True" />
        <field name="perm_create" eval="True" />
        <field name="perm_unlink" eval="True" />
        <field name="domain_force">[("user_id", "=", user.id)]</field>
    </record>

    <!--
        a department manager should have full access to the account analytic lines of
        their subordinates
    -->
    <record id="department_manager_department_account_analytic_line" model="ir.rule">
        <field name="name">department_manager_department_account_analytic_line</field>
        <field name="model_id" ref="account.model_account_analytic_line" />
        <field name="groups" eval="[(4, ref('base.group_user'))]" />
        <field name="perm_read" eval="True" />
        <field name="perm_write" eval="True" />
        <field name="perm_create" eval="True" />
        <field name="perm_unlink" eval="True" />
        <field name="domain_force">[("employee_id", "child_of", user.employee_ids.mapped("id"))]
        </field>
    </record>

    <!-- an hr officer should have full access to all account analytic lines -->
    <record id="hr_officer_all_account_analytic_line" model="ir.rule">
        <field name="name">hr_officer_all_account_analytic_line</field>
        <field name="model_id" ref="account.model_account_analytic_line" />
        <field name="groups" eval="[(4, ref('hr.group_hr_user'))]" />
        <field name="perm_read" eval="True" />
        <field name="perm_write" eval="True" />
        <field name="perm_create" eval="True" />
        <field name="perm_unlink" eval="True" />
        <field name="domain_force">[]</field>
    </record>

    <!-- timesheet sheets -->

    <!-- an employee should have full access to their own timesheet sheets -->
    <record id="hr_employee_own_timesheet_sheet" model="ir.rule">
        <field name="name">hr_employee_own_timesheet_sheet</field>
        <field name="model_id" ref="hr_timesheet_sheet.model_hr_timesheet_sheet" />
        <field name="groups" eval="[(4, ref('base.group_user'))]" />
        <field name="perm_read" eval="True" />
        <field name="perm_write" eval="True" />
        <field name="perm_create" eval="True" />
        <field name="perm_unlink" eval="True" />
        <field name="domain_force">[("employee_id.user_id", "=", user.id)]</field>
    </record>

    <!--
        a department manager should have full access to the timesheet sheets of their
        subordinates
    -->
    <record id="department_manager_department_timesheet_sheet" model="ir.rule">
        <field name="name">department_manager_department_timesheet_sheet</field>
        <field name="model_id" ref="hr_timesheet_sheet.model_hr_timesheet_sheet" />
        <field name="groups" eval="[(4, ref('base.group_user'))]" />
        <field name="perm_read" eval="True" />
        <field name="perm_write" eval="True" />
        <field name="perm_create" eval="True" />
        <field name="perm_unlink" eval="True" />
        <field
            name="domain_force"
        >[("employee_id", "child_of", user.employee_ids.mapped("id"))]</field>
    </record>

    <!-- an hr officer should have full access to all timesheet sheets -->
    <record id="hr_officer_all_timesheet_sheet" model="ir.rule">
        <field name="name">hr_officer_all_timesheet_sheet</field>
        <field name="model_id" ref="hr_timesheet_sheet.model_hr_timesheet_sheet" />
        <field name="groups" eval="[(4, ref('hr.group_hr_user'))]" />
        <field name="perm_read" eval="True" />
        <field name="perm_write" eval="True" />
        <field name="perm_create" eval="True" />
        <field name="perm_unlink" eval="True" />
        <field name="domain_force">[]</field>
    </record>

    <!-- leaves -->

    <!-- deactivate standard rule: an employee must not be able to access all leaves -->
    <record id="hr_holidays.hr_leave_rule_employee" model="ir.rule">
        <field name="active" eval="False" />
    </record>

    <!-- an employee should have read-only access to their own leaves -->
    <record id="hr_employee_own_leave" model="ir.rule">
        <field name="name">hr_employee_own_leave</field>
        <field name="model_id" ref="hr_holidays.model_hr_leave" />
        <field name="groups" eval="[(4, ref('base.group_user'))]" />
        <field name="perm_read" eval="True" />
        <field name="perm_write" eval="False" />
        <field name="perm_create" eval="False" />
        <field name="perm_unlink" eval="False" />
        <field name="domain_force">[("user_id", "=", user.id)]</field>
    </record>

    <!--
        a department manager should have full access to the leaves of their subordinates
    -->
    <record id="department_manager_department_leave" model="ir.rule">
        <field name="name">department_manager_department_leave</field>
        <field name="model_id" ref="hr_holidays.model_hr_leave" />
        <field name="groups" eval="[(4, ref('base.group_user'))]" />
        <field name="perm_read" eval="True" />
        <field name="perm_write" eval="True" />
        <field name="perm_create" eval="True" />
        <field name="perm_unlink" eval="True" />
        <field
            name="domain_force"
        >[("employee_id", "child_of", user.employee_ids.mapped("id"))]</field>
    </record>

    <!-- leave reports -->

    <!-- an employee should have read-only access to their own leave reports -->
    <record id="hr_employee_own_leave_report" model="ir.rule">
        <field name="name">hr_employee_own_leave_report</field>
        <field name="model_id" ref="hr_holidays.model_hr_leave_report" />
        <field name="groups" eval="[(4, ref('base.group_user'))]" />
        <field name="perm_read" eval="True" />
        <field name="perm_write" eval="False" />
        <field name="perm_create" eval="False" />
        <field name="perm_unlink" eval="False" />
        <field name="domain_force">[("employee_id.user_id", "=", user.id)]</field>
    </record>

    <!--
        a department manager should have read-only access to the leave reports of their
        subordinates
    -->
    <record id="department_manager_department_leave_report" model="ir.rule">
        <field name="name">department_manager_department_leave_report</field>
        <field name="model_id" ref="hr_holidays.model_hr_leave_report" />
        <field name="groups" eval="[(4, ref('base.group_user'))]" />
        <field name="perm_read" eval="True" />
        <field name="perm_write" eval="False" />
        <field name="perm_create" eval="False" />
        <field name="perm_unlink" eval="False" />
        <field
            name="domain_force"
        >[("employee_id", "child_of", user.employee_ids.mapped("id"))]</field>
    </record>

    <!-- an hr officer should have read-only access to all leave reports -->
    <record id="hr_officer_all_leave_report" model="ir.rule">
        <field name="name">hr_officer_all_leave_report</field>
        <field name="model_id" ref="hr_holidays.model_hr_leave_report" />
        <field name="groups" eval="[(4, ref('hr.group_hr_user'))]" />
        <field name="perm_read" eval="True" />
        <field name="perm_write" eval="False" />
        <field name="perm_create" eval="False" />
        <field name="perm_unlink" eval="False" />
        <field name="domain_force">[]</field>
    </record>

    <!-- leaves allocations -->

    <!--
        deactivate standard rule: an employee must not be able to access their own
        leaves allocations
    -->
    <record id="hr_holidays.hr_leave_allocation_rule_employee" model="ir.rule">
        <field name="active" eval="False" />
    </record>

    <!--
        deactivate standard rule: an employee must not be able to create/write/unlink
        their own not validated leaves allocations
    -->
    <record id="hr_holidays.hr_leave_allocation_rule_employee_update" model="ir.rule">
        <field name="active" eval="False" />
    </record>

    <!-- contracts -->

    <!--
        add a new user group, inheriting from the contracts manager group. note that in
        provelo's db, for some reason, all employees are members of the
        hr_contract.group_hr_contract_manager, but here we define another contracts
        manager group, which only people that should be able to manage contracts are a
        part of.
    -->
    <record id="group_hr_contract_manager" model="res.groups">
        <field name="name">Manager (Pro Velo)</field>
        <field name="category_id" ref="base.module_category_hr_contract" />
        <field
            name="implied_ids"
            eval="[(4, ref('hr_contract.group_hr_contract_manager'))]"
        />
    </record>
</odoo>
